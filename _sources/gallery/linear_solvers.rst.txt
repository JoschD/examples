
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/linear_solvers.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_linear_solvers.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_linear_solvers.py:


.. _linear-solvers:

=======================
Linear Equation Solvers
=======================

A quick summary for linear equation solvers available in python packages.

.. GENERATED FROM PYTHON SOURCE LINES 12-15

.. code-block:: default

    import numpy as np
    import cvxpy as cp
    import scipy







.. GENERATED FROM PYTHON SOURCE LINES 16-20

Let's say we want to solve an equation system

.. math::
    A \cdot x = y

.. GENERATED FROM PYTHON SOURCE LINES 20-26

.. code-block:: default


    A = np.array([[1, 2], [4, 6]])
    y = np.array([3, 6])
    print("A=")
    print(A)
    print(f"{y=!s}")




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    A=
    [[1 2]
     [4 6]]
    y=[3 6]




.. GENERATED FROM PYTHON SOURCE LINES 27-35

If the equation system is exact solvable, i.e. if the inverse of A exists,
we can either calculate 

.. math::
      x = A^{-1} \cdot y

.. warning::
      Don't!

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default


    x = np.linalg.inv(A).dot(y)
    print(f"{x=!s}")




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    x=[-3.  3.]




.. GENERATED FROM PYTHON SOURCE LINES 39-40

Or let numpy solve this for you:

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: default


    x = np.linalg.solve(A, y)
    print(f"{x=!s}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    x=[-3.  3.]




.. GENERATED FROM PYTHON SOURCE LINES 45-46

This does not work with non-invertable matrices!

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    A = np.array([[1, 2, 5], [4, 6, 1]])
    y = np.array([3, 6])
    try:
        x = np.linalg.solve(A, y)
    except np.linalg.LinAlgError as e:
        print(f"1) {e.__class__.__name__}: {e!s}")


    try:
            x = np.linalg.inv(A).dot(y)
    except np.linalg.LinAlgError as e:
        print(f"2) {e.__class__.__name__}: {e!s}")




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    1) LinAlgError: Last 2 dimensions of the array must be square
    2) LinAlgError: Last 2 dimensions of the array must be square




.. GENERATED FROM PYTHON SOURCE LINES 59-62

But we can still find a solution for x

via the linear least squares algorithm implemented in numpy:

.. GENERATED FROM PYTHON SOURCE LINES 62-69

.. code-block:: default


    x, residuals, rank, sv = np.linalg.lstsq(A, y, rcond=None)
    print(f"{x=!s}")
    print(f"{residuals=!s}")
    print(f"{rank=!s}")
    print(f"{sv=!s}")
    print(f"A * x = {A @ x}")




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    x=[0.43603133 0.66840731 0.24543081]
    residuals=[]
    rank=2
    sv=[8.08966253 4.19015038]
    A * x = [3. 6.]




.. GENERATED FROM PYTHON SOURCE LINES 70-75

Or at least the x that fulfills: 

.. math::
      \min_{x} \left\lVert A \cdot x - y \right\rVert


.. GENERATED FROM PYTHON SOURCE LINES 75-85

.. code-block:: default


    A = np.array([[1, 1], [6, 1], [4, 6]])
    y = np.array([3, 6, 8])
    x, residuals, rank, sv = np.linalg.lstsq(A, y, rcond=None)
    print(f"{x=!s}")
    print(f"{residuals=!s}")
    print(f"{rank=!s}")
    print(f"{sv=!s}")
    print(f"A * x = {A @ x}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    x=[0.88414055 0.77872745]
    residuals=[1.83855651]
    rank=2
    sv=[8.79740626 3.68858281]
    A * x = [1.662868   6.08357075 8.20892688]





.. _sphx_glr_download_gallery_linear_solvers.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: linear_solvers.py <linear_solvers.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: linear_solvers.ipynb <linear_solvers.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
